/*
Copyright 2019 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openebs/maya/pkg/apis/openebs.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CStorPoolLister helps list CStorPools.
type CStorPoolLister interface {
	// List lists all CStorPools in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CStorPool, err error)
	// CStorPools returns an object that can list and get CStorPools.
	CStorPools(namespace string) CStorPoolNamespaceLister
	CStorPoolListerExpansion
}

// cStorPoolLister implements the CStorPoolLister interface.
type cStorPoolLister struct {
	indexer cache.Indexer
}

// NewCStorPoolLister returns a new CStorPoolLister.
func NewCStorPoolLister(indexer cache.Indexer) CStorPoolLister {
	return &cStorPoolLister{indexer: indexer}
}

// List lists all CStorPools in the indexer.
func (s *cStorPoolLister) List(selector labels.Selector) (ret []*v1alpha1.CStorPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CStorPool))
	})
	return ret, err
}

// CStorPools returns an object that can list and get CStorPools.
func (s *cStorPoolLister) CStorPools(namespace string) CStorPoolNamespaceLister {
	return cStorPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CStorPoolNamespaceLister helps list and get CStorPools.
type CStorPoolNamespaceLister interface {
	// List lists all CStorPools in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CStorPool, err error)
	// Get retrieves the CStorPool from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CStorPool, error)
	CStorPoolNamespaceListerExpansion
}

// cStorPoolNamespaceLister implements the CStorPoolNamespaceLister
// interface.
type cStorPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CStorPools in the indexer for a given namespace.
func (s cStorPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CStorPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CStorPool))
	})
	return ret, err
}

// Get retrieves the CStorPool from the indexer for a given namespace and name.
func (s cStorPoolNamespaceLister) Get(name string) (*v1alpha1.CStorPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cstorpool"), name)
	}
	return obj.(*v1alpha1.CStorPool), nil
}
